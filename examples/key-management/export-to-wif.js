/*
  Export an XEC wallet's private key to WIF (Wallet Import Format).
  This example shows how to export private keys in different formats.
*/

const MinimalXECWallet = require('../../index')
const WalletHelper = require('../utils/wallet-helper')

async function exportToWif () {
  try {
    console.log('üîê Exporting XEC wallet private key to WIF format...\n')

    // Check if wallet exists
    if (!WalletHelper.walletExists()) {
      console.error('‚ùå No wallet found!')
      console.log('   Create a wallet first using one of these commands:')
      console.log('   ‚Ä¢ node examples/wallet-creation/create-new-wallet.js')
      console.log('   ‚Ä¢ node examples/wallet-creation/restore-from-mnemonic.js')
      console.log('   ‚Ä¢ node examples/wallet-creation/import-from-wif.js')
      process.exit(1)
    }

    // Load wallet from wallet.json
    const walletInfo = WalletHelper.loadWallet()
    const wallet = new MinimalXECWallet(walletInfo.mnemonic || walletInfo.privateKey)
    await wallet.walletInfoPromise

    console.log('üìã Current Wallet Information:')
    console.log('‚ïê'.repeat(50))
    console.log(`XEC Address: ${wallet.walletInfo.xecAddress}`)
    console.log(`Wallet Type: ${wallet.walletInfo.mnemonic ? 'HD Wallet' : 'Single Key'}`)
    console.log('‚ïê'.repeat(50))

    console.log('\nüîë Exporting Private Key in WIF Formats:')
    console.log('‚ïê'.repeat(50))

    // Export mainnet compressed WIF
    const mainnetCompressed = wallet.exportPrivateKeyAsWIF(true, false)
    console.log(`Mainnet Compressed:   ${mainnetCompressed}`)
    console.log(`‚îú‚îÄ Validation:        ${wallet.validateWIF(mainnetCompressed) ? '‚úÖ Valid' : '‚ùå Invalid'}`)
    console.log(`‚îú‚îÄ Length:            ${mainnetCompressed.length} characters`)
    console.log('‚îî‚îÄ Usage:             Most common format for importing')

    // Export mainnet uncompressed WIF
    const mainnetUncompressed = wallet.exportPrivateKeyAsWIF(false, false)
    console.log(`\nMainnet Uncompressed: ${mainnetUncompressed}`)
    console.log(`‚îú‚îÄ Validation:        ${wallet.validateWIF(mainnetUncompressed) ? '‚úÖ Valid' : '‚ùå Invalid'}`)
    console.log(`‚îú‚îÄ Length:            ${mainnetUncompressed.length} characters`)
    console.log('‚îî‚îÄ Usage:             Legacy format, less common')

    // Export testnet compressed WIF
    const testnetCompressed = wallet.exportPrivateKeyAsWIF(true, true)
    console.log(`\nTestnet Compressed:   ${testnetCompressed}`)
    console.log(`‚îú‚îÄ Validation:        ${wallet.validateWIF(testnetCompressed) ? '‚úÖ Valid' : '‚ùå Invalid'}`)
    console.log(`‚îú‚îÄ Length:            ${testnetCompressed.length} characters`)
    console.log('‚îî‚îÄ Usage:             For testnet applications')

    // Export testnet uncompressed WIF
    const testnetUncompressed = wallet.exportPrivateKeyAsWIF(false, true)
    console.log(`\nTestnet Uncompressed: ${testnetUncompressed}`)
    console.log(`‚îú‚îÄ Validation:        ${wallet.validateWIF(testnetUncompressed) ? '‚úÖ Valid' : '‚ùå Invalid'}`)
    console.log(`‚îú‚îÄ Length:            ${testnetUncompressed.length} characters`)
    console.log('‚îî‚îÄ Usage:             For testnet, legacy format')

    console.log('\nüìä WIF Format Reference:')
    console.log('‚ïê'.repeat(50))
    console.log('Format                 | Prefix | Network | Compression')
    console.log('‚îÄ'.repeat(50))
    console.log('Mainnet Compressed     | K, L   | Mainnet | Yes')
    console.log('Mainnet Uncompressed   | 5      | Mainnet | No')
    console.log('Testnet Compressed     | c      | Testnet | Yes')
    console.log('Testnet Uncompressed   | 9      | Testnet | No')

    console.log('\nüîç Round-trip Validation Test:')
    console.log('‚îÄ'.repeat(30))

    // Test round-trip conversion
    const testWIF = mainnetCompressed
    const importedWallet = new MinimalXECWallet(testWIF)
    await importedWallet.walletInfoPromise

    const addressMatch = importedWallet.walletInfo.xecAddress === wallet.walletInfo.xecAddress
    console.log(`Original Address:  ${wallet.walletInfo.xecAddress}`)
    console.log(`Imported Address:  ${importedWallet.walletInfo.xecAddress}`)
    console.log(`Addresses Match:   ${addressMatch ? '‚úÖ Yes' : '‚ùå No'}`)

    if (addressMatch) {
      console.log('\nüéâ Success! WIF export and import working correctly.')
    } else {
      console.log('\n‚ùå Warning! Address mismatch detected.')
    }

    console.log('\nüîê SECURITY WARNINGS:')
    console.log('‚ïê'.repeat(50))
    console.log('‚Ä¢ WIF private keys provide FULL access to your funds')
    console.log('‚Ä¢ Never share WIF keys with anyone')
    console.log('‚Ä¢ Store WIF keys securely and offline')
    console.log('‚Ä¢ Anyone with your WIF can steal your XEC')
    console.log('‚Ä¢ Use WIF export only when necessary (wallet recovery, etc.)')

    console.log('\nüí° Usage Examples:')
    console.log('‚ïê'.repeat(50))
    console.log('‚Ä¢ Import into other wallets or applications')
    console.log('‚Ä¢ Paper wallet creation for cold storage')
    console.log('‚Ä¢ Wallet backup and recovery')
    console.log('‚Ä¢ Cross-platform wallet migration')
  } catch (err) {
    console.error('‚ùå Failed to export WIF:', err.message)
    process.exit(1)
  }
}

// Run the example
exportToWif()
